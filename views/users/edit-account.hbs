{{>menu-edit}}
<div class="container mt-5">
  <div class="row">
    <div class="col-sm-3 p-2">
      <div class="card text-left">
        <div class="text-center pt-5">
          <img width="100" height="100" src="{{user.avatar}}" alt="user" class="rounded-circle shadow">
        </div>
        <div class="card-body text-center">
          <h4 class="card-title">{{user.name}}</h4>
        </div>
      </div>
    </div>
    <div class="col-sm-9 p-2">
      <form id="form-1" method="POST">
        <div class="card">
          <div class="card-header align-items-center text-center">
            <h3>
              Account
            </h3>
            <p>Edit your account settings and change your password here.</p>
          </div>


          <div class="card-body">

            <div class="form-group">
              <label for="old-pass">Current Password</label>
              <input type="password" class="form-control" id="old-pass">
              <span class="form-message" id="old-pass-msg"></span>
            </div>
            <div class="form-group">
              <label for="new-pass">New Password</label>
              <input type="password" class="form-control" id="new-pass">
              <span class="form-message"></span>
            </div>
            <div class="form-group">
              <label for="new-pass-confirm">Re-type New Password</label>
              <input type="password" class="form-control" id="new-pass-confirm">
              <span class="form-message"></span>
            </div>

          </div>



        </div>
        <div class="card-footer text-muted text-center">
          <button type="" class="btn btn-outline-success " id="change-pass">
            <i class="fa fa-check" aria-hidden="true"></i>
            Change password
          </button>
        </div>
    </div>
    </form>
  </div>
</div>

{{#section 'js'}}

  <script>
     function Validator(options){
    
      function getParent(element, selector){
          while(element.parentElement){
              if(element.parentElement.matches(selector)){
                  return element.parentElement;
              }
              element = element.parentElement;
          }
      }

    // Hàm thực hiện validate
    function validate(inputElement, rule){
            var errorMessage = getParent(inputElement, options.formGroup);
            var errorElement=getParent(inputElement, options.formGroup).querySelector(options.errorSelector);
            var rules = selectorRules[rule.selector];
            for( var i = 0; i<rules.length; ++i ){
                switch(inputElement.type){
                    default:
                        errorMessage = rules[i](inputElement.value);
                }
                if(errorMessage) break;
            }
            if(errorMessage){
                errorElement.innerText = errorMessage;
                getParent(inputElement, options.formGroup).classList.add('invalid'); 
            }
            else {
                errorElement.innerText = '';
                getParent(inputElement, options.formGroup).classList.remove('invalid'); 
        }
        return ! errorMessage;
    }
    var formElement= document.querySelector(options.form);

    var selectorRules = {};

    if (formElement) {
        formElement.onsubmit = function (e) {
            e.preventDefault();

            var isFormValid= true;

            options.rules.forEach(function (rule) {
                
                var inputElement = formElement.querySelector(rule.selector);

                var isValid = validate(inputElement,rule);   
                if(!isValid){
                    isFormValid = false;
                }            
            });
            if(isFormValid){
                     var oldPass = $("#old-pass").val();
                    var newPass = $("#new-pass").val();
                    console.log(oldPass,newPass)
                    $.ajax({
                        url: "/student/change",
                        type:"post",
                        data: { oldPass: oldPass, newPass: newPass },
                        success: function (response) {
                            //sai mat khau
                            if (response == "false") {
                                alert("Wrong password");
                                var oldPassMsg=document.querySelector(".form-message");
                                var formOldPass=document.querySelector('.form-group');
                                formOldPass.classList.add("invalid");
                                
                                oldPassMsg.innerHTML = 'Bạn đã nhập sai mật khẩu cũ. Vui lòng nhập đúng'

                            }
                            else{
                                alert("Đổi mk thành công");
                              location.href="/";
                            }
                        }
                    });
                }
                
            
        }
        // Lặp qa mỗi rule và xử lí( Lắng nge sự kiện blur, input,...)
        options.rules.forEach(function (rule){

            if(Array.isArray(selectorRules[rule.selector])){
                selectorRules[rule.selector].push(rule.test);
            }
            else{
                selectorRules[rule.selector] = [rule.test];
            }

            var inputElements= formElement.querySelectorAll(rule.selector);

            Array.from(inputElements).forEach(function(inputElement){
                if(inputElement){
                    // Xử lý mỗi khi blur ra khõi input
                    inputElement.onblur = function(){
                        validate(inputElement,rule);
                    }
                    // Xử lý mỗi khi người dùng nhập vào input
                    inputElement.oninput = function(){
                        var errorElement=getParent(inputElement, options.formGroup).querySelector(options.errorSelector);
                        errorElement.innerText = '';
                        getParent(inputElement, options.formGroup).classList.remove('invalid'); 
                    }
    
                }
            });
            
        });
    }
}

  Validator.isRequired= function (selector,msg){
      return {
          selector: selector ,
          test: function (value) {
              return value ? undefined : msg || 'Vui lòng nhập thông tin';
          }
      };
  }


  Validator.minLength= function(selector,min,msg){
      return {
          selector: selector ,
          test: function (value) {
              
              return value.length>=min? undefined : msg || `Vui lòng nhập tối thĩu ${min} kí tự`;
          }
      };
  }

  Validator.isConfirmed= function(selector,getConfirmValue,msg){
      return {
          selector: selector ,
          test: function (value) {
              
              return value===getConfirmValue()? undefined : msg || `Nhập lại đúng mật khẩu`;
          }
      };
  }
  
  Validator({
              form:'#form-1',
              formGroup:'.form-group',
              errorSelector:'.form-message',
              rules:[
                  Validator.isRequired('#old-pass','Vui lòng nhập mật khẩu cũ của bạn'),
                  Validator.isRequired('#new-pass','Vui lòng nhập mật khẩu mới'),
                  Validator.minLength('#new-pass',6),
                  Validator.isConfirmed('#new-pass-confirm',function() {
                    return document.querySelector('#form-1 #new-pass').value;
                  },'Mật khẩu không khớp')
              ],
              
          }
          )

  </script>
{{/section}}